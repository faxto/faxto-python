# coding: utf-8

"""
    Fax.to REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CountryApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def areacodes_country_code_state_id_get(self, country_code, state_id, **kwargs):
        """
        This API get areacodes . 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.areacodes_country_code_state_id_get(country_code, state_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str country_code: countryCode in the Country (required)
        :param str state_id: stateId in the Country (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.areacodes_country_code_state_id_get_with_http_info(country_code, state_id, **kwargs)
        else:
            (data) = self.areacodes_country_code_state_id_get_with_http_info(country_code, state_id, **kwargs)
            return data

    def areacodes_country_code_state_id_get_with_http_info(self, country_code, state_id, **kwargs):
        """
        This API get areacodes . 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.areacodes_country_code_state_id_get_with_http_info(country_code, state_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str country_code: countryCode in the Country (required)
        :param str state_id: stateId in the Country (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code', 'state_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method areacodes_country_code_state_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params) or (params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `areacodes_country_code_state_id_get`")
        # verify the required parameter 'state_id' is set
        if ('state_id' not in params) or (params['state_id'] is None):
            raise ValueError("Missing the required parameter `state_id` when calling `areacodes_country_code_state_id_get`")


        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['countryCode'] = params['country_code']
        if 'state_id' in params:
            path_params['stateId'] = params['state_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/areacodes/{countryCode}/{stateId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def countries_country_code_didgroups_get(self, country_code, did_group_ids, state_id, city_name_pattern, **kwargs):
        """
        This API didgroups countryCode. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.countries_country_code_didgroups_get(country_code, did_group_ids, state_id, city_name_pattern, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str country_code: countryCode in the Country (required)
        :param str did_group_ids: didGroupId in the Country (required)
        :param str state_id: stateId in the Country (required)
        :param str city_name_pattern: cityNamePattern in the Country (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.countries_country_code_didgroups_get_with_http_info(country_code, did_group_ids, state_id, city_name_pattern, **kwargs)
        else:
            (data) = self.countries_country_code_didgroups_get_with_http_info(country_code, did_group_ids, state_id, city_name_pattern, **kwargs)
            return data

    def countries_country_code_didgroups_get_with_http_info(self, country_code, did_group_ids, state_id, city_name_pattern, **kwargs):
        """
        This API didgroups countryCode. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.countries_country_code_didgroups_get_with_http_info(country_code, did_group_ids, state_id, city_name_pattern, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str country_code: countryCode in the Country (required)
        :param str did_group_ids: didGroupId in the Country (required)
        :param str state_id: stateId in the Country (required)
        :param str city_name_pattern: cityNamePattern in the Country (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code', 'did_group_ids', 'state_id', 'city_name_pattern']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method countries_country_code_didgroups_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params) or (params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `countries_country_code_didgroups_get`")
        # verify the required parameter 'did_group_ids' is set
        if ('did_group_ids' not in params) or (params['did_group_ids'] is None):
            raise ValueError("Missing the required parameter `did_group_ids` when calling `countries_country_code_didgroups_get`")
        # verify the required parameter 'state_id' is set
        if ('state_id' not in params) or (params['state_id'] is None):
            raise ValueError("Missing the required parameter `state_id` when calling `countries_country_code_didgroups_get`")
        # verify the required parameter 'city_name_pattern' is set
        if ('city_name_pattern' not in params) or (params['city_name_pattern'] is None):
            raise ValueError("Missing the required parameter `city_name_pattern` when calling `countries_country_code_didgroups_get`")


        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['countryCode'] = params['country_code']

        query_params = []
        if 'did_group_ids' in params:
            query_params.append(('didGroupIds', params['did_group_ids']))
        if 'state_id' in params:
            query_params.append(('stateId', params['state_id']))
        if 'city_name_pattern' in params:
            query_params.append(('cityNamePattern', params['city_name_pattern']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/countries/{countryCode}/didgroups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def countries_didgroups_did_group_id_provision_post(self, did_group_id, **kwargs):
        """
        This API didgroups provision. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.countries_didgroups_did_group_id_provision_post(did_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did_group_id: didGroupId in the Country (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.countries_didgroups_did_group_id_provision_post_with_http_info(did_group_id, **kwargs)
        else:
            (data) = self.countries_didgroups_did_group_id_provision_post_with_http_info(did_group_id, **kwargs)
            return data

    def countries_didgroups_did_group_id_provision_post_with_http_info(self, did_group_id, **kwargs):
        """
        This API didgroups provision. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.countries_didgroups_did_group_id_provision_post_with_http_info(did_group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str did_group_id: didGroupId in the Country (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did_group_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method countries_didgroups_did_group_id_provision_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did_group_id' is set
        if ('did_group_id' not in params) or (params['did_group_id'] is None):
            raise ValueError("Missing the required parameter `did_group_id` when calling `countries_didgroups_did_group_id_provision_post`")


        collection_formats = {}

        path_params = {}
        if 'did_group_id' in params:
            path_params['didGroupId'] = params['did_group_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/countries/didgroups/{didGroupId}/provision', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def countries_get(self, **kwargs):
        """
        This API get countries. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.countries_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.countries_get_with_http_info(**kwargs)
        else:
            (data) = self.countries_get_with_http_info(**kwargs)
            return data

    def countries_get_with_http_info(self, **kwargs):
        """
        This API get countries. 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.countries_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method countries_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/countries', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def states_country_code_get(self, country_code, **kwargs):
        """
        This API get States . 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.states_country_code_get(country_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str country_code: countryCode in the Country (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.states_country_code_get_with_http_info(country_code, **kwargs)
        else:
            (data) = self.states_country_code_get_with_http_info(country_code, **kwargs)
            return data

    def states_country_code_get_with_http_info(self, country_code, **kwargs):
        """
        This API get States . 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.states_country_code_get_with_http_info(country_code, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str country_code: countryCode in the Country (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method states_country_code_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params) or (params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `states_country_code_get`")


        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['countryCode'] = params['country_code']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/states/{countryCode}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
